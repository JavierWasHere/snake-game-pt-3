#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <iostream>
#include <deque>

class SnakeGame {
public:
    SnakeGame(int width, int height, int blockSize)
        : window(sf::VideoMode(width, height), "Snake Game"), blockSize(blockSize), direction(0, -1) {

        // Set up the snake
        snake.push_front(sf::Vector2i(width / 2, height / 2));

        // Set up the food
        spawnFood();

        // Set up the clock
        clock.restart();
    }

    void run() {
        while (window.isOpen()) {
            processEvents();
            if (gameRunning) {
                update();
                render();
            }
        }
    }

private:
    sf::RenderWindow window;
    sf::Vector2i direction;
    std::deque<sf::Vector2i> snake;
    sf::Vector2i food;
    int blockSize;
    sf::Clock clock;
    bool gameRunning = true;

    void processEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Up && direction != sf::Vector2i(0, 1)) {
                    direction = sf::Vector2i(0, -1);
                } else if (event.key.code == sf::Keyboard::Down && direction != sf::Vector2i(0, -1)) {
                    direction = sf::Vector2i(0, 1);
                } else if (event.key.code == sf::Keyboard::Left && direction != sf::Vector2i(1, 0)) {
                    direction = sf::Vector2i(-1, 0);
                } else if (event.key.code == sf::Keyboard::Right && direction != sf::Vector2i(-1, 0)) {
                    direction = sf::Vector2i(1, 0);
                }
            }
        }
    }

    void update() {
        if (clock.getElapsedTime().asMilliseconds() < 100) {
            return;
        }

        // Move the snake
        sf::Vector2i newHead = snake.front() + direction;
        snake.push_front(newHead);

        // Check if snake ate food
        if (newHead == food) {
            spawnFood();  // Spawn new food
        } else {
            snake.pop_back();  // Remove the tail
        }

        // Check for collisions with walls or self
        if (newHead.x < 0 || newHead.x >= window.getSize().x / blockSize ||
            newHead.y < 0 || newHead.y >= window.getSize().y / blockSize ||
            std::find(snake.begin(), snake.end(), newHead) != snake.end()) {
            gameRunning = false;  // End the game if snake collides
        }

        clock.restart();
    }

    void render() {
        window.clear();

        // Draw the snake
        for (auto& segment : snake) {
            sf::RectangleShape rect(sf::Vector2f(blockSize, blockSize));
            rect.setPosition(segment.x * blockSize, segment.y * blockSize);
            rect.setFillColor(sf::Color::Green);
            window.draw(rect);
        }

        // Draw the food
        sf::RectangleShape foodRect(sf::Vector2f(blockSize, blockSize));
        foodRect.setPosition(food.x * blockSize, food.y * blockSize);
        foodRect.setFillColor(sf::Color::Red);
        window.draw(foodRect);

        window.display();
    }

    void spawnFood() {
        food = sf::Vector2i(rand() % (window.getSize().x / blockSize), rand() % (window.getSize().y / blockSize));
    }
};

int main() {
    SnakeGame game(800, 600, 20);
    game.run();
    return 0;
}
